//Name: Hendry Suryadi Arya
//Student No: E1900337
//JDK Version: 17.0.1
//Assignment 2
//IDE: Apache NetBeans
//Change Profile Form
package as2;




import java.io.Serializable;
import java.lang.Math;
import java.time.LocalDate;
import java.time.Period;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

public class SchoolHELP implements Serializable{
    //Here we create 4 arraylists to store all school, users, requests, and offers.
    private ArrayList<School> schools;
    private ArrayList<User> users;
    private ArrayList<Request> requests;
    private ArrayList<Offer> offers;


    public SchoolHELP() {
        //We initialize those arraylist when the constructor is called.
        schools = new ArrayList<School>();
        users  = new ArrayList<User>();
        requests = new ArrayList<Request>();
        offers = new ArrayList<Offer>();
    }

    //This method returns the current date.
    public Date getCurrentDate(){
        Date date = new Date();
        return date;
    }

    //This method checks for username availability
    public boolean isUsernameAvailable(String username){
        //Checks if the users stream has a user with the same username as the one given to this method.
        boolean anyUserNameMatch = users.stream().anyMatch(user -> user.getUsername().equals(username));
        //If there is a match, this will return false and vice versa to inform if a username is available or not.
        return !anyUserNameMatch;
    }

    //This method registers an admin into the program.
    //It takes all the admin info, creates a SchoolAdmin object, then add them to the users arraylist.
    public void registerAdmin(String username, String password, String fullName, String email, String phone, String staffID, String position, String schoolId){
        SchoolAdmin anAdmin = new SchoolAdmin(username, password, fullName, email, phone, staffID, position, schoolId);
        users.add(anAdmin);
    }

    //This method registers a volunteer into the program.
    //It takes all the volunteer info, creates a volunteer object, then add it to the users arraylist.
    public void registerVolunteer(String username, String password, String fullName, String email, String phone, String dateOfBirth, String occupation){
        Volunteer aVolunteer = new Volunteer(username, password, fullName, email, phone, dateOfBirth, occupation);
        users.add(aVolunteer);
    }



    //verify login information
    //Returns the index number of the user, if user is not found return -1.
    public int verifyLoginInfo(String loginType, String username, String password){
        int userIndex = -1;
        //This checks for admin login credentials.
        if(loginType.equals("admin")){
            for(int i = 0; i < users.size(); i++){
                if(users.get(i) instanceof SchoolAdmin){
                    if(users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)){
                        userIndex = i;
                    }
                }
            }
        }
        //And this checks for volunteer login credentials.
        else{
            for(int i = 0; i < users.size(); i++){
                if(users.get(i) instanceof Volunteer){
                    if(users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)){
                        userIndex = i;
                    }
                }
            }
        }

        return userIndex;
    }


    //This generates an ID by taking a unique identifier.
    //for example if a school is located in the Denpasar City, Denpasar is the unique identifier.
    public String generateID(String uniqueIdentifier){
        //This will take the first letter of Denpasar to use as the first letter for the ID.
        //for example D12345 is an ID generated by this method for a school located in Denpasar.
        String firstLetter = uniqueIdentifier.substring(0,1).toUpperCase();
        //The number is simply generated using Math.random().
        int generatedNum = (int) (Math.random() * 10000) + 1;
        return firstLetter+generatedNum;
    };

    //This registers a school into the program.
    //It takes all the School info, create a school object, then add it to the arraylist.
    public void registerSchool(String schoolID, String schoolName, String schoolAddress, String schoolCity){
        School aSchool = new School(schoolID, schoolName, schoolAddress, schoolCity);
        schools.add(aSchool);
    }

    //This simply returns a user according to the index supplied.
    public User getUserByIndex(int userIndex){
        return users.get(userIndex);
    }

    //This method finds a school index according to the School ID supplied.
    //Traverses the schools arraylist, then returns the matching school's index.
    public int findSchoolIndex(String schoolID){
        int schoolIndex = -1;
        for(int i = 0; i < schools.size(); i++){
            if(schools.get(i).getSchoolID().equals(schoolID)){
                schoolIndex = i;
            }
        }
        return schoolIndex;
    }

    //This simply returns the school object according to the index supplied.
    public School getSchoolByIndex(int schoolIndex){

        return schools.get(schoolIndex);
    }

    //This creates a tutorial request.
    //It takes all the appropriate details regarding the tutorial, asks the generateID() method to create an ID,--
    //-- creates a tutorialRequest object, then puts said tutorialRequest object into the requests arraylist.
    public void createTutorialRequest(String description, String proposedDate, String proposedTime,
                                      String studentLevel, int numStudents, School aSchool){
        String generatedId = generateID(aSchool.getSchoolName());
        TutorialRequest aTutorialRequest = new TutorialRequest(generatedId, getCurrentDate(), "Not Completed",
                description, proposedDate, proposedTime, studentLevel, numStudents, aSchool);
        requests.add(aTutorialRequest);
    }

    //This creates a tutorial request.
    //It takes all the appropriate details regarding the tutorial, asks the generateID() method to create an ID,--
    //-- creates a resourceRequest object, then puts said resourceRequest object into the requests arraylist.
    public void createResourceRequest(String description, String resourceType, int numRequired, School aSchool){
        String generatedId = generateID(aSchool.getSchoolName());
        ResourceRequest aResourceRequest = new ResourceRequest(generatedId, getCurrentDate(), "Not Completed",
                description, resourceType, numRequired, aSchool);
        requests.add(aResourceRequest);

    }

    //This finds the index of a request according to its ID.
    //It traverses the requests arraylist then returns the appropriate index.
    //If it doesn't found any matches, it will return -1.
    public int findRequestIndex(String reqID){
        int foundIndex = -1;
        for(int i = 0; i < requests.size(); i++){
            if(requests.get(i).getRequestID().equals(reqID)){
                foundIndex = i;
            }
        }
        return foundIndex;
    }

    //This simply returns a request object from the requests arraylist according to the supplied index.
    public Request getRequestByIndex(int reqIndex){
        return requests.get(reqIndex);
    }

    //This method submits an offer into the program.
    //It takes all the appropriate details regarding the offer, asks the generateID() method to create an ID,--
    //-- creates an offer object, then puts said offer object into the offers arraylist.
    public void submitOffer(String remarks, String requestID, String volUserName){
        Offer anOffer = new Offer(getCurrentDate(), remarks, "Pending", requestID, generateID(volUserName),volUserName);
        offers.add(anOffer);
    }

    //This method finds the request type, wether it's a resource request or a tutorial request.
    //it does so by using instanceof.
    public String findRequestType(Request inReq){
        if(inReq instanceof TutorialRequest){
            return "Tutorial Request";
        }
        else{
            return "Resource Request";
        }
    }

    //This returns a string that contains all requests sorted according to "sorter" (city/date/school).
    public List viewRequestsSorted(String sorter){
        //First we create a temporary List that filters all requests which are "Not Completed".
        //This is done, so we don't mess up the index of the original arraylist.
        List<Request> tempRequest = requests.stream().filter(c -> c.getRequestStatus().
                equalsIgnoreCase("Not Completed")).collect(Collectors.toList());

        //We use Collections.sort to sort all of them, a seperate class has already been made to facilitate this.
        //this sorts them according to city
        if(sorter.equalsIgnoreCase("city")){
            Collections.sort(tempRequest, new SortByCity());
            return tempRequest;
        }
        //Sorts by Date
        else if (sorter.equalsIgnoreCase("date")) {
            Collections.sort(tempRequest, new SortByDate());
            return tempRequest;
        }
        //sorts by School
        else if(sorter.equalsIgnoreCase("school")){
            Collections.sort(tempRequest, new SortBySchool());
            return tempRequest;
        }
        //Display all request according to school name,followed by
        //displaying all assistance request sorted from propoesed date.
        //Assignment point number 9.
        else if(sorter.equalsIgnoreCase("type")){
            //First we create a list only contraining resource requests
            List<Request> resRequest = tempRequest.stream()
                    .filter(b -> b instanceof ResourceRequest)      
                    .collect(Collectors.toList());
            Collections.sort(resRequest, new SortBySchool());
            
            
            List<Request> tutRequest = tempRequest.stream()
                    .filter(tr -> tr instanceof TutorialRequest) 
                    .collect(Collectors.toList());
            Collections.sort(tutRequest, new SortByProposedDate());
            
            List<Request> mergedRequest = new ArrayList<>();
            mergedRequest.addAll(resRequest);
            mergedRequest.addAll(tutRequest);

            return mergedRequest;
        }
        else{
            return tempRequest;
        }
        
    }

    //This method returns a string that contains all request done by a school.
    public List viewRequestsAdmin(String inAdminSchoolID, String sorter){
        
        //Again, we create a temporary list that contains all requests which matches the admin's school ID.
        //This is done so we don't mess up the index of the original requests arraylist.
        List<Request> tempRequest = requests.stream().filter(c -> c.getReqSchool().getSchoolID().equalsIgnoreCase(inAdminSchoolID)).collect(Collectors.toList());
        if(sorter.equalsIgnoreCase("statusdate")){
                Collections.sort(tempRequest, new SortByStatusDate());
                return tempRequest;
        }
        else{
            return tempRequest;
        }
        
    }

    //A simple method to check if there is any request in the requests arraylist.
    public boolean isRequestEmpty(){
        if(requests.size() == 0){
            return true;
        }
        else{
            return false;
        }
    }

    //this views the details of a request.
    public String viewARequest(String requestID){
        int reqIndex = findRequestIndex(requestID);
        return requests.get(reqIndex).toString();
    }

    //This returns the user that matches the supplied username.
    //This is done by traversing the users arraylist and returning the match.
    public User getUserByUsername(String inUsername){
        User foundUser = null;
        for (int i = 0; i < users.size(); i++){
            if(users.get(i).getUsername().equals(inUsername)){
                foundUser = users.get(i);
            }
        }
        return foundUser;

    }

    //This calculates the age of the supplied volunteer from date of birth to the day the method was executed.
    public int calculateVolAge(Volunteer volIn){
        //First we get the volunteer's date of birth.
        String volDateOfBirth = volIn.getDateOfbirth();
        //Then we chop them to day, month, and year.
        int day = Integer.parseInt(volDateOfBirth.substring(0,2));
        int month = Integer.parseInt(volDateOfBirth.substring(3,5));
        int year = Integer.parseInt(volDateOfBirth.substring(6));
        //We create LocalDate which represents the day the method was executed.
        LocalDate currentDate = LocalDate.now();
        //And we create another LocalDate, but this time we supply it with the volunteer's date of birth.
        LocalDate volDoB = LocalDate.of(year,month,day);
        //Using period, this compare the two.
        Period period = Period.between(volDoB, currentDate);
        //finally, this will return the years seperating the two dates.
        return period.getYears();
    }

    //This method returns a string that contains all offers for a particular request.
    //It uses stream filter to simply takes offer with matching request ID.
    public List viewOfferForReq(String requestIdIn){
        
        List<Offer> tempOffers = offers.stream().filter(c -> c.getRequestedID()
                .equalsIgnoreCase(requestIdIn))
                .collect(Collectors.toList());
        return tempOffers;
    }


    //This finds the offer index according to the supplied offer ID.
    //It simply traverses the offers arraylist then returns the index of matched offer.
    public int findOfferIndex(String offerID){
        int foundIndex = -1;
        for(int i = 0; i < offers.size(); i ++){
           if(offers.get(i).getOfferID().equalsIgnoreCase(offerID)){
               foundIndex = i;
           }
        }
        return foundIndex;
    }

    //This is used to accept an offer according to the supplied offer ID.
    public void acceptOffer(String offerID){
        int offerIndex = findOfferIndex(offerID);
        int reqIndex = findRequestIndex(offers.get(offerIndex).getRequestedID());
        //This changes the offer status to "ACCEPTED" nad request status to "CLOSED".
        offers.get(offerIndex).setOfferStatus("ACCEPTED");
        requests.get(reqIndex).setRequestStatus("CLOSED");
    }
    public void declineOffer(String offerID){
        int offerIndex = findOfferIndex(offerID);
        //This changes the offer status to "DECLINED"
        offers.get(offerIndex).setOfferStatus("DECLINED");
    }
    
    
//    public List sortAllUsers(String sorter){
//        List<User> tempUsers = users;
//        if(sorter.equalsIgnoreCase("fullname")){
//            Collections.sort(tempUsers, new SortNameByFullName());
//            return tempUsers;
//        }
//        else{
//            return tempUsers;
//        }
//    }
    public List sortAllUsers(String sorter){
        
        if(sorter.equalsIgnoreCase("fullname")){
            List<User> tempUsers = users.stream()
                    .sorted(Comparator.comparing(User::getFullName))
                    .collect(Collectors.toList());
            return tempUsers;
        }
        else{
            return users;
        }
    }
    
   
    public String findUserType(User inUser){
        if(inUser instanceof SchoolAdmin){
            return "Administrator";
        }
        else{
            return "Volunteer";
        }
    }
    
    public ArrayList<User> getAllUsers(){
        return users;
    }

    
    public ArrayList getSchoolList(){
        
        return schools;
    }
    
   
    
}
